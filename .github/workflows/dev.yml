name: Dev Deployment

on:
  push:
    branches:
      - dev

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install uv
        run: |
          python -m pip install --upgrade pip
          pip install uv

      - name: Install dependencies
        run: |
          uv pip install -r requirements.txt
          uv pip install -r requirements-dev.txt

      - name: Run linting with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests with pytest
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

  semantic-version:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate version
        id: version
        run: |
          # Get latest tag, increment patch for dev builds
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          VERSION="${LATEST_TAG}-dev.${GITHUB_RUN_NUMBER}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"

  build-and-deploy:
    needs: [test, semantic-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.REGISTRY_URL }}/app:${{ needs.semantic-version.outputs.version }} .
          docker build -t ${{ secrets.REGISTRY_URL }}/app:dev-latest .

      - name: Test Docker Image
        run: |
          docker-compose run test

      - name: Login to Registry
        run: echo ${{ secrets.REGISTRY_PASSWORD }} | docker login ${{ secrets.REGISTRY_URL }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin

      - name: Push Image
        run: |
          docker push ${{ secrets.REGISTRY_URL }}/app:${{ needs.semantic-version.outputs.version }}
          docker push ${{ secrets.REGISTRY_URL }}/app:dev-latest

      - name: Deploy to Dev Environment
        run: |
          # Your deployment script here with version
          echo "Deploying version ${{ needs.semantic-version.outputs.version }} to dev environment..."
          # kubectl set image deployment/myapp container=${{ secrets.REGISTRY_URL }}/app:${{ needs.semantic-version.outputs.version }}
