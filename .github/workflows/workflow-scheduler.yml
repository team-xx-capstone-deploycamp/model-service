name: CI/CD Pipeline For Luigi Scheduler
on:
  push:
    branches:
      - main
      - prod
  pull_request:
    branches:
      - prod
    types: [opened, synchronize]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BASE_IMAGE_NAME: ${{ github.repository }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      should-test: ${{ steps.should-test.outputs.result }}
      should-build-deploy: ${{ steps.should-build-deploy.outputs.result }}
      should-rebuild: ${{ steps.should-build-deploy.outputs.rebuild }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            luigi-scheduler:
              - '.github/workflows/workflow-scheduler.yml'
            python-packages:
              - 'docker/luigi/**/*.py'
              - 'docker/luigi/**/requirements.txt'
              - 'docker/luigi/**/setup.py'
              - 'docker/luigi/**/pyproject.toml'
            src-changes:
              - 'src/**'
            shared:
              - 'shared/**'
              - 'pyproject.toml'
              - 'setup.py'

      - uses: dorny/paths-filter@v2
        id: changes-pr
        with:
          base: ${{ github.event.pull_request.base.sha || github.event.before }}
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          filters: |
            luigi-scheduler:
              - '.github/workflows/workflow-scheduler.yml'
            python-packages:
              - 'docker/luigi/**/*.py'
              - 'docker/luigi/**/requirements.txt'
              - 'docker/luigi/**/setup.py'
              - 'docker/luigi/**/pyproject.toml'
            src-changes:
              - 'src/**'
              - '.dvc/**'
              - 'data/**'
            shared:
              - 'shared/**'
              - 'pyproject.toml'
              - 'setup.py'

      - name: Should run tests
        id: should-test
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Test in PRs if files changed
            if [[ "${{ steps.changes.outputs.luigi-scheduler }}" == "true" || "${{ steps.changes.outputs.shared }}" == "true" ]]; then
              echo "result=true" >> $GITHUB_OUTPUT
              echo "🧪 Will run tests for PR"
            else
              echo "result=false" >> $GITHUB_OUTPUT
              echo "⏭️ No relevant changes, skipping tests"
            fi
          else
            echo "result=false" >> $GITHUB_OUTPUT
            echo "⏭️ Not a PR, skipping tests"
          fi

      - name: Should build and deploy
        id: should-build-deploy
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/prod" ]]; then
            # Check if Python packages in docker/luigi have changed
            if [[ "${{ steps.changes-pr.outputs.python-packages }}" == "true" || "${{ steps.changes-pr.outputs.luigi-scheduler }}" == "true" || "${{ steps.changes-pr.outputs.shared }}" == "true" ]]; then
              echo "result=true" >> $GITHUB_OUTPUT
              echo "rebuild=true" >> $GITHUB_OUTPUT
              echo "🚀 Will rebuild and deploy to prod"
            # Check if only src files have changed
            elif [[ "${{ steps.changes-pr.outputs.src-changes }}" == "true" ]]; then
              echo "result=true" >> $GITHUB_OUTPUT
              echo "rebuild=false" >> $GITHUB_OUTPUT
              echo "📄 Will copy src files and restart service"
            else
              echo "result=false" >> $GITHUB_OUTPUT
              echo "rebuild=false" >> $GITHUB_OUTPUT
              echo "⏭️ No relevant changes, skipping build/deploy"
            fi
          else
            echo "result=false" >> $GITHUB_OUTPUT
            echo "rebuild=false" >> $GITHUB_OUTPUT
            echo "⏭️ Not prod push, skipping build/deploy"
          fi


  luigi-scheduler-quality:
    runs-on: ubuntu-latest
    name: Luigi Scheduler - Code Quality
    if: needs.detect-changes.outputs.should-test == 'true'
    needs: detect-changes
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Test dependency resolution
        run: |
          echo "Testing if dependencies can be resolved..."
          uv venv test-env
          if uv pip install -r docker/luigi/requirements.txt --dry-run; then
            echo "✅ Dependencies can be resolved"
          else
            echo "❌ Dependency resolution failed - using fallback audit"
            # Create a fallback requirements file for audit
            cat > requirements-fallback.txt << EOF
          luigi==3.6.0
          psycopg2-binary==2.9.10
          sqlalchemy==2.0.42
          python-dotenv==1.1.1
          pandas>=2.2.3
          numpy>=1.24.4
          scikit-learn>=1.4.0
          mlflow==3.1.4
          EOF
          fi

      - name: Luigi Scheduler Dependency Scan
        uses: pypa/gh-action-pip-audit@v1.0.8
        with:
          inputs: ${{ hashFiles('requirements-fallback.txt') && 'requirements-fallback.txt' || 'docker/luigi/requirements.txt' }}
          continue-on-error: true

      - name: Luigi Scheduler Dockerfile Lint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: docker/luigi/Dockerfile

  luigi-scheduler-test:
    runs-on: ubuntu-latest
    name: Luigi Scheduler - Tests
    if: needs.detect-changes.outputs.should-test == 'true'
    needs: luigi-scheduler-quality
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Cache uv dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ hashFiles('docker/luigi/requirements.txt') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Create virtual environment
        run: uv venv .venv

      - name: Install test dependencies
        run: |
          uv pip install pytest pytest-cov

      - name: Install project dependencies
        run: |
          if [ -f docker/luigi/requirements.txt ]; then 
          echo "Installing from docker/luigi/requirements.txt"
          uv pip install -r docker/luigi/requirements.txt
          else
          echo "Warning: requirements.txt not found"
          exit 1
          fi

      - name: Verify installation
        run: |
          uv pip list

      - name: Run Luigi Scheduler Tests
        run: |
          cd src
          source ../.venv/bin/activate
          pytest --cov=. --cov-report=xml --cov-report=term --verbose
          mv coverage.xml ../luigi-scheduler-coverage.xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./luigi-scheduler-coverage.xml
          flags: luigi-scheduler

  sonarcloud-analysis:
    runs-on: ubuntu-latest
    name: SonarCloud Analysis
    needs: [ luigi-scheduler-test ]
    if: needs.detect-changes.outputs.should-test == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download coverage reports
      - name: Download coverage reports
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: coverage-reports
          path: ./coverage/

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  luigi-scheduler-build:
    runs-on: ubuntu-latest
    name: Luigi Scheduler - Build
    if: needs.detect-changes.outputs.should-build-deploy == 'true'
    needs: detect-changes
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-name: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}/luigi-scheduler
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}/luigi-scheduler
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest-tested,enable={{is_default_branch}}

      - name: Extract deployment tag
        id: extract-tag
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Use PR number for PR builds
            TAG="${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}/luigi-scheduler:pr-${{ github.event.number }}"
          else
            # Use SHA for branch builds
            TAG="${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}/luigi-scheduler:sha-${{ github.sha }}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Deployment tag: ${TAG}"

      - name: Update Entrypoint File
        run: |
          # Create a temporary entrypoint.sh with environment variables
          echo "LUIGI_DB_HOST=${{ secrets.LUIGI_DB_HOST || 'postgres' }}" >> .env.scheduler
          echo "LUIGI_DB_PORT=${{ secrets.LUIGI_DB_PORT || '5432' }}" >> .env.scheduler
          echo "LUIGI_DB_NAME=${{ secrets.LUIGI_DB_NAME || 'luigidb' }}" >> .env.scheduler
          echo "LUIGI_DB_USER=${{ secrets.LUIGI_DB_USER || 'luigi' }}" >> .env.scheduler
          echo "LUIGI_DB_PASSWORD=${{ secrets.LUIGI_DB_PASSWORD || 'luigi123' }}" >> .env.scheduler

          export $(cat .env.scheduler | xargs) && envsubst < docker/luigi/entrypoint.sh > docker/luigi/entrypoint.sh.tmp && mv docker/luigi/entrypoint.sh.tmp docker/luigi/entrypoint.sh


      - name: Build and push Luigi Scheduler
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./docker/luigi
          file: ./docker/luigi/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=luigi-scheduler
          cache-to: type=gha,mode=max,scope=luigi-scheduler

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: [ luigi-scheduler-build ]
    if: needs.detect-changes.outputs.should-build-deploy == 'true'
    permissions:
      contents: read
      security-events: write
      actions: read
      packages: read
    outputs:
      image-name: ${{ needs.luigi-scheduler-build.outputs.image-name }}
      image-digest: ${{ needs.luigi-scheduler-build.outputs.image-digest }}
    strategy:
      matrix:
        service: [ luigi-scheduler ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image reference
        id: image-ref
        run: |
          # Use image digest for exact reference to the built image
          IMAGE_REF="${{ needs.luigi-scheduler-build.outputs.image-name }}@${{ needs.luigi-scheduler-build.outputs.image-digest }}"
          echo "image-ref=${IMAGE_REF}" >> $GITHUB_OUTPUT
          echo "Using image reference: ${IMAGE_REF}"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image-ref.outputs.image-ref }}
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}-results.sarif'
          skip-files: '/usr/local/bundle/gems/**'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Check if SARIF file exists
        id: check-sarif
        run: |
          if [ -f "trivy-${{ matrix.service }}-results.sarif" ]; then
            echo "sarif-exists=true" >> $GITHUB_OUTPUT
            echo "SARIF file found"
          else
            echo "sarif-exists=false" >> $GITHUB_OUTPUT
            echo "SARIF file not found"
          fi

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.check-sarif.outputs.sarif-exists == 'true'
        with:
          sarif_file: 'trivy-${{ matrix.service }}-results.sarif'
          category: 'trivy-${{ matrix.service }}'

  deploy:
    runs-on: ubuntu-latest
    needs: [security-scan, detect-changes]
    if: needs.detect-changes.outputs.should-build-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set image reference
        id: image-ref
        if: needs.detect-changes.outputs.should-rebuild == 'true'
        run: |
          IMAGE_REF="${{ needs.security-scan.outputs.image-name }}@${{ needs.security-scan.outputs.image-digest }}"
          echo "image-ref=${IMAGE_REF}" >> $GITHUB_OUTPUT
          echo "Deploying image: ${IMAGE_REF}"

      - name: Set up environment variables from secrets
        run: |
          echo "Setting up environment variables from secrets"
          echo "LUIGI_DB_HOST=${{ secrets.LUIGI_DB_HOST || 'postgres' }}" >> .env.scheduler
          echo "LUIGI_DB_PORT=${{ secrets.LUIGI_DB_PORT || '5432' }}" >> .env.scheduler
          echo "LUIGI_DB_NAME=${{ secrets.LUIGI_DB_NAME || 'luigidb' }}" >> .env.scheduler
          echo "LUIGI_DB_USER=${{ secrets.LUIGI_DB_USER || 'luigi' }}" >> .env.scheduler
          echo "LUIGI_DB_PASSWORD=${{ secrets.LUIGI_DB_PASSWORD || 'luigi123' }}" >> .env.scheduler
          echo "MINIO_ENDPOINT=${{ secrets.MINIO_ENDPOINT || 'minio.capstone.pebrisulistiyo.com' }}" >> .env.scheduler
          echo "MINIO_ACCESS_KEY=${{ secrets.MINIO_ACCESS_KEY || 'minioadmin' }}" >> .env.scheduler
          echo "MINIO_SECRET_KEY=${{ secrets.MINIO_SECRET_KEY || 'minioadmin' }}" >> .env.scheduler
          echo "MINIO_BUCKET_NAME=${{ secrets.MINIO_BUCKET_NAME || 'bucket' }}" >> .env.scheduler
          echo "MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI || 'http://localhost:5000' }}" >> .env.scheduler
          echo "MLFLOW_EXPERIMENT_NAME=${{ secrets.MLFLOW_EXPERIMENT_NAME || 'car_price_prediction' }}" >> .env.scheduler
          echo "MLFLOW_USERNAME=${{ secrets.MLFLOW_USERNAME || '' }}" >> .env.scheduler
          echo "MLFLOW_PASSWORD=${{ secrets.MLFLOW_PASSWORD || '' }}" >> .env.scheduler
          if [[ "${{ needs.detect-changes.outputs.should-rebuild }}" == "true" ]]; then
            echo "SCHEDULER_IMAGE_NAME=${{ steps.image-ref.outputs.image-ref }}" >> .env.scheduler
          else
            # If not rebuilding, use the current image
            echo "Getting current image from VPS"
            CURRENT_IMAGE=$(ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "cd ~/model-service && grep -o 'SCHEDULER_IMAGE_NAME=.*' .env.scheduler | cut -d'=' -f2")
            echo "SCHEDULER_IMAGE_NAME=${CURRENT_IMAGE}" >> .env.scheduler
          fi
          echo "WRAPPER_IMAGE_NAME=alpine:latest" >> .env.scheduler

      - name: Add VPS host to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      # Only copy src files if we're not rebuilding but need to update
      - name: Copy src files to VPS
        if: needs.detect-changes.outputs.should-rebuild == 'false'
        run: |
          # Create necessary directories on VPS
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "mkdir -p ~/model-service/src ~/model-service/data ~/model-service/.dvc"

          # Copy src, .dvc, and data files to VPS
          scp -r src/* ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:~/model-service/src
          scp -r .dvc/* ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:~/model-service/.dvc
          scp -r data/* ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:~/model-service/data
          scp -r .env.scheduler ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:~/model-service/

      # Copy all files if we're rebuilding
      - name: Copy all files to VPS
        if: needs.detect-changes.outputs.should-rebuild == 'true'
        run: |
          # Create necessary directories on VPS
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "mkdir -p ~/model-service/src ~/model-service/config ~/model-service/data ~/model-service/.dvc"

          # Copy files to VPS
          scp -r docker-compose.yml .env.scheduler ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:~/model-service/
          scp -r src/* ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:~/model-service/src
          scp -r config/* ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:~/model-service/config
          scp -r data/* ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:~/model-service/data
          scp -r .dvc/* ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:~/model-service/.dvc

      - name: Process Config Files
        if: needs.detect-changes.outputs.should-rebuild == 'true'
        run: |
          # Process Luigi Config
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "cd ~/model-service && export $(cat .env.scheduler | xargs) && envsubst < config/luigi.cfg > config/luigi.cfg.tmp && mv config/luigi.cfg.tmp config/luigi.cfg"

          # Process DVC Config
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "cd ~/model-service && export $(cat .env.scheduler | xargs) && envsubst < .dvc/config > .dvc/config.tmp && mv .dvc/config.tmp .dvc/config"

      - name: Update Image
        if: needs.detect-changes.outputs.should-rebuild == 'true'
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "cd ~/model-service && export $(cat .env.scheduler | xargs) && envsubst < docker-compose.yml > docker-compose.scheduler.yml"

      - name: Deploy or Restart Service on VPS
        run: |
          if [[ "${{ needs.detect-changes.outputs.should-rebuild }}" == "true" ]]; then
            echo "Deploying rebuilt service scheduler on VPS"
            ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "cd ~/model-service && docker compose -f docker-compose.scheduler.yml --env-file .env.scheduler up -d luigi"
          else
            echo "Restarting service scheduler on VPS"
            ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "cd ~/model-service && docker restart luigi_scheduler"
          fi
