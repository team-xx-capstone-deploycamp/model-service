name: Model Training Pipeline
on:
  push:
    branches:
      - prod
    paths:
      - 'src/pipeline/train_model.py'
      - 'data/CarPrice_Assignment.csv.dvc'
  workflow_run:
    workflows: ["CI/CD Pipeline For Luigi Scheduler"]
    types:
      - completed
    branches:
      - prod

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      should-train: ${{ steps.should-train.outputs.result }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          base: ${{ github.event.pull_request.base.sha || github.event.before }}
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          filters: |
            model-training:
              - '.github/workflows/model-training.yml'
              - 'src/pipeline/train_model.py'
              - 'data/CarPrice_Assignment.csv.dvc'

      - name: Should run model training
        id: should-train
        run: |
          # If triggered by workflow_run, check if the workflow was successful
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
              echo "result=true" >> $GITHUB_OUTPUT
              echo "🚀 Will run model training after successful scheduler workflow"
            else
              echo "result=false" >> $GITHUB_OUTPUT
              echo "⏭️ Scheduler workflow did not succeed, skipping model training"
            fi
          # If triggered by push, check if relevant files changed
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/prod" ]]; then
            if [[ "${{ steps.changes.outputs.model-training }}" == "true" ]]; then
              echo "result=true" >> $GITHUB_OUTPUT
              echo "🚀 Will run model training due to relevant file changes"
            else
              echo "result=false" >> $GITHUB_OUTPUT
              echo "⏭️ No relevant changes, skipping model training"
            fi
          else
            echo "result=false" >> $GITHUB_OUTPUT
            echo "⏭️ Not a supported trigger, skipping model training"
          fi

  wait-for-scheduler:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should-train == 'true' && github.event_name != 'workflow_run'
    steps:
      - name: Wait for workflow-scheduler to complete
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: 'deploy'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

  train-model:
    runs-on: ubuntu-latest
    needs: [detect-changes, wait-for-scheduler]
    if: |
      needs.detect-changes.outputs.should-train == 'true' && 
      (github.event_name == 'workflow_run' || success())
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install DVC
        run: |
          pip install dvc[s3]

      - name: Set up DVC with MinIO
        env:
          MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY || 'minioadmin' }}
          MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY || 'minioadmin' }}
          MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT || 'minio.capstone.pebrisulistiyo.com' }}
        run: |
          # Update DVC config to use HTTP instead of HTTPS
          sed -i 's|https://|http://|g' .dvc/config

          # Pull data from MinIO using DVC
          dvc pull data/CarPrice_Assignment.csv.dvc

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add VPS host to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Copy data to VPS
        run: |
          # Create data directory on VPS if it doesn't exist
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "mkdir -p ~/model-service/data"

          # Copy data file to VPS
          scp -r data/CarPrice_Assignment.csv ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:~/model-service/data/

      - name: Run Luigi task for model training
        run: |
          echo "Running model training task on VPS"
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "cd ~/model-service && docker exec luigi_scheduler python -m luigi --module src.pipeline.train_model CarPricePredictionPipeline --local-scheduler"
